//
//  WordPressUIIcons.swift
//
//  Created on Jun 4, 2019.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit

class WordPressUIIcons: NSObject {
    
    //MARK: - Canvas Drawings
    class func drawBlavatardefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)
        
        /// blavatar-default
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 40, y: 0))
                clip2.addLine(to: CGPoint(x: 40, y: 40))
                clip2.addLine(to: CGPoint(x: 0, y: 40))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 50, y: 0))
                fill1.addLine(to: CGPoint(x: 50, y: 50))
                fill1.addLine(to: CGPoint(x: 0, y: 50))
                fill1.addLine(to: CGPoint.zero)
                fill1.close()
                context.saveGState()
                context.translateBy(x: -5, y: -5)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.567, saturation: 0.111, brightness: 0.882, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 7)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint(x: 13, y: 0))
                clip5.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: 5.82, y: 0), controlPoint2: CGPoint(x: 0, y: 5.82))
                clip5.addCurve(to: CGPoint(x: 13, y: 26), controlPoint1: CGPoint(x: 0, y: 20.18), controlPoint2: CGPoint(x: 5.82, y: 26))
                clip5.addCurve(to: CGPoint(x: 26, y: 13), controlPoint1: CGPoint(x: 20.18, y: 26), controlPoint2: CGPoint(x: 26, y: 20.18))
                clip5.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 26, y: 5.82), controlPoint2: CGPoint(x: 20.18, y: 0))
                clip5.addLine(to: CGPoint(x: 13, y: 0))
                clip5.close()
                clip5.move(to: CGPoint(x: 13, y: 23.4))
                clip5.addLine(to: CGPoint(x: 15.6, y: 20.8))
                clip5.addLine(to: CGPoint(x: 16.9, y: 19.5))
                clip5.addLine(to: CGPoint(x: 16.9, y: 16.9))
                clip5.addLine(to: CGPoint(x: 14.3, y: 16.9))
                clip5.addLine(to: CGPoint(x: 14.3, y: 15.6))
                clip5.addLine(to: CGPoint(x: 13, y: 14.3))
                clip5.addLine(to: CGPoint(x: 9.1, y: 14.3))
                clip5.addLine(to: CGPoint(x: 9.1, y: 18.2))
                clip5.addLine(to: CGPoint(x: 11.7, y: 20.8))
                clip5.addLine(to: CGPoint(x: 11.7, y: 23.31))
                clip5.addCurve(to: CGPoint(x: 2.6, y: 13), controlPoint1: CGPoint(x: 6.58, y: 22.67), controlPoint2: CGPoint(x: 2.6, y: 18.29))
                clip5.addLine(to: CGPoint(x: 3.9, y: 14.3))
                clip5.addLine(to: CGPoint(x: 6.5, y: 14.3))
                clip5.addLine(to: CGPoint(x: 6.5, y: 11.7))
                clip5.addLine(to: CGPoint(x: 9.1, y: 11.7))
                clip5.addLine(to: CGPoint(x: 13, y: 7.8))
                clip5.addLine(to: CGPoint(x: 13, y: 5.2))
                clip5.addLine(to: CGPoint(x: 10.4, y: 5.2))
                clip5.addLine(to: CGPoint(x: 9.1, y: 3.9))
                clip5.addLine(to: CGPoint(x: 9.1, y: 3.37))
                clip5.addCurve(to: CGPoint(x: 13, y: 2.6), controlPoint1: CGPoint(x: 10.31, y: 2.87), controlPoint2: CGPoint(x: 11.62, y: 2.6))
                clip5.addCurve(to: CGPoint(x: 16.9, y: 3.37), controlPoint1: CGPoint(x: 14.38, y: 2.6), controlPoint2: CGPoint(x: 15.69, y: 2.88))
                clip5.addLine(to: CGPoint(x: 16.9, y: 5.2))
                clip5.addLine(to: CGPoint(x: 15.6, y: 6.5))
                clip5.addLine(to: CGPoint(x: 15.6, y: 9.1))
                clip5.addLine(to: CGPoint(x: 16.9, y: 10.4))
                clip5.addLine(to: CGPoint(x: 20.97, y: 6.33))
                clip5.addCurve(to: CGPoint(x: 23.06, y: 10.4), controlPoint1: CGPoint(x: 21.95, y: 7.5), controlPoint2: CGPoint(x: 22.66, y: 8.88))
                clip5.addLine(to: CGPoint(x: 20.8, y: 10.4))
                clip5.addLine(to: CGPoint(x: 18.2, y: 13))
                clip5.addLine(to: CGPoint(x: 18.2, y: 15.6))
                clip5.addLine(to: CGPoint(x: 19.5, y: 16.9))
                clip5.addLine(to: CGPoint(x: 22.1, y: 16.9))
                clip5.addLine(to: CGPoint(x: 22.47, y: 17.27))
                clip5.addCurve(to: CGPoint(x: 13, y: 23.4), controlPoint1: CGPoint(x: 20.84, y: 20.88), controlPoint2: CGPoint(x: 17.21, y: 23.4))
                clip5.addLine(to: CGPoint(x: 13, y: 23.4))
                clip5.close()
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 36, y: 0))
                fill4.addLine(to: CGPoint(x: 36, y: 36))
                fill4.addLine(to: CGPoint(x: 0, y: 36))
                fill4.addLine(to: CGPoint.zero)
                fill4.close()
                context.saveGState()
                context.translateBy(x: -5, y: -5)
                fill4.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill4.fill()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGravatar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 85, height: 85), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 85, height: 85), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 85, y: resizedFrame.height / 85)
        
        /// gravatar
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 85, y: 0))
                clip2.addLine(to: CGPoint(x: 85, y: 85))
                clip2.addLine(to: CGPoint(x: 0, y: 85))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 95, y: 0))
                fill1.addLine(to: CGPoint(x: 95, y: 95))
                fill1.addLine(to: CGPoint(x: 0, y: 95))
                fill1.addLine(to: CGPoint.zero)
                fill1.close()
                context.saveGState()
                context.translateBy(x: -5, y: -5)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.567, saturation: 0.111, brightness: 0.882, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 17, y: 17)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint(x: 25, y: 0))
                clip5.addCurve(to: CGPoint(x: 37.5, y: 12.5), controlPoint1: CGPoint(x: 31.9, y: 0), controlPoint2: CGPoint(x: 37.5, y: 5.6))
                clip5.addCurve(to: CGPoint(x: 25, y: 25), controlPoint1: CGPoint(x: 37.5, y: 19.4), controlPoint2: CGPoint(x: 31.9, y: 25))
                clip5.addCurve(to: CGPoint(x: 12.5, y: 12.5), controlPoint1: CGPoint(x: 18.1, y: 25), controlPoint2: CGPoint(x: 12.5, y: 19.4))
                clip5.addCurve(to: CGPoint(x: 25, y: 0), controlPoint1: CGPoint(x: 12.5, y: 5.6), controlPoint2: CGPoint(x: 18.1, y: 0))
                clip5.addLine(to: CGPoint(x: 25, y: 0))
                clip5.close()
                clip5.move(to: CGPoint(x: 25, y: 50))
                clip5.addCurve(to: CGPoint(x: 50, y: 43.75), controlPoint1: CGPoint(x: 25, y: 50), controlPoint2: CGPoint(x: 50, y: 50))
                clip5.addCurve(to: CGPoint(x: 25, y: 28.13), controlPoint1: CGPoint(x: 50, y: 36.25), controlPoint2: CGPoint(x: 37.81, y: 28.13))
                clip5.addCurve(to: CGPoint(x: 0, y: 43.75), controlPoint1: CGPoint(x: 12.19, y: 28.13), controlPoint2: CGPoint(x: 0, y: 36.25))
                clip5.addCurve(to: CGPoint(x: 25, y: 50), controlPoint1: CGPoint(x: 0, y: 50), controlPoint2: CGPoint(x: 25, y: 50))
                clip5.addLine(to: CGPoint(x: 25, y: 50))
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                context.restoreGState()
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.5, y: 0.5))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 60, y: 0))
                fill4.addLine(to: CGPoint(x: 60, y: 60))
                fill4.addLine(to: CGPoint(x: 0, y: 60))
                fill4.addLine(to: CGPoint.zero)
                fill4.close()
                context.saveGState()
                context.translateBy(x: -4.5, y: -4.5)
                fill4.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill4.fill()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIconurlfield(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)
        
        /// icon-url-field
        do {
            context.saveGState()
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint(x: 9, y: 0))
            clip2.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
            clip2.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
            clip2.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
            clip2.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
            clip2.addLine(to: CGPoint(x: 9, y: 0))
            clip2.close()
            clip2.move(to: CGPoint(x: 9, y: 16.2))
            clip2.addLine(to: CGPoint(x: 10.8, y: 14.4))
            clip2.addLine(to: CGPoint(x: 11.7, y: 13.5))
            clip2.addLine(to: CGPoint(x: 11.7, y: 11.7))
            clip2.addLine(to: CGPoint(x: 9.9, y: 11.7))
            clip2.addLine(to: CGPoint(x: 9.9, y: 10.8))
            clip2.addLine(to: CGPoint(x: 9, y: 9.9))
            clip2.addLine(to: CGPoint(x: 6.3, y: 9.9))
            clip2.addLine(to: CGPoint(x: 6.3, y: 12.6))
            clip2.addLine(to: CGPoint(x: 8.1, y: 14.4))
            clip2.addLine(to: CGPoint(x: 8.1, y: 16.14))
            clip2.addCurve(to: CGPoint(x: 1.8, y: 9), controlPoint1: CGPoint(x: 4.55, y: 15.69), controlPoint2: CGPoint(x: 1.8, y: 12.66))
            clip2.addLine(to: CGPoint(x: 2.7, y: 9.9))
            clip2.addLine(to: CGPoint(x: 4.5, y: 9.9))
            clip2.addLine(to: CGPoint(x: 4.5, y: 8.1))
            clip2.addLine(to: CGPoint(x: 6.3, y: 8.1))
            clip2.addLine(to: CGPoint(x: 9, y: 5.4))
            clip2.addLine(to: CGPoint(x: 9, y: 3.6))
            clip2.addLine(to: CGPoint(x: 7.2, y: 3.6))
            clip2.addLine(to: CGPoint(x: 6.3, y: 2.7))
            clip2.addLine(to: CGPoint(x: 6.3, y: 2.33))
            clip2.addCurve(to: CGPoint(x: 9, y: 1.8), controlPoint1: CGPoint(x: 7.13, y: 1.99), controlPoint2: CGPoint(x: 8.05, y: 1.8))
            clip2.addCurve(to: CGPoint(x: 11.7, y: 2.33), controlPoint1: CGPoint(x: 9.95, y: 1.8), controlPoint2: CGPoint(x: 10.87, y: 1.99))
            clip2.addLine(to: CGPoint(x: 11.7, y: 3.6))
            clip2.addLine(to: CGPoint(x: 10.8, y: 4.5))
            clip2.addLine(to: CGPoint(x: 10.8, y: 6.3))
            clip2.addLine(to: CGPoint(x: 11.7, y: 7.2))
            clip2.addLine(to: CGPoint(x: 14.52, y: 4.38))
            clip2.addCurve(to: CGPoint(x: 15.96, y: 7.2), controlPoint1: CGPoint(x: 15.19, y: 5.19), controlPoint2: CGPoint(x: 15.69, y: 6.15))
            clip2.addLine(to: CGPoint(x: 14.4, y: 7.2))
            clip2.addLine(to: CGPoint(x: 12.6, y: 9))
            clip2.addLine(to: CGPoint(x: 12.6, y: 10.8))
            clip2.addLine(to: CGPoint(x: 13.5, y: 11.7))
            clip2.addLine(to: CGPoint(x: 15.3, y: 11.7))
            clip2.addLine(to: CGPoint(x: 15.56, y: 11.96))
            clip2.addCurve(to: CGPoint(x: 9, y: 16.2), controlPoint1: CGPoint(x: 14.43, y: 14.45), controlPoint2: CGPoint(x: 11.92, y: 16.2))
            clip2.addLine(to: CGPoint(x: 9, y: 16.2))
            clip2.close()
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint.zero)
            fill1.addLine(to: CGPoint(x: 28, y: 0))
            fill1.addLine(to: CGPoint(x: 28, y: 28))
            fill1.addLine(to: CGPoint(x: 0, y: 28))
            fill1.addLine(to: CGPoint.zero)
            fill1.close()
            context.saveGState()
            context.translateBy(x: -5, y: -5)
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.569, saturation: 0.282, brightness: 0.737, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    class func blavatarPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
        WordPressUIIcons.drawBlavatardefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func gravatarPlaceholder() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 85, height: 85), false, 0)
        WordPressUIIcons.drawGravatar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func linkField() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
        WordPressUIIcons.drawIconurlfield()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
